generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conversation {
  id           String    @id @default(cuid())
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  messages     Message[]
  participants User[]    @relation("ConversationParticipants")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  isAdmin        Boolean        @default(false)
  createdAt      DateTime       @default(now())
  dbId           String         @unique
  profilePicture String?
  messages       Message[]
  conversations  Conversation[] @relation("ConversationParticipants")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [dbId])
}

model City {
  id            String      @id @default(cuid())
  galleryPhotos String[]
  cityName      String
  province      String
  mainImage     String
  locationId    String      @unique
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  location      Location    @relation(fields: [locationId], references: [id])
  landscapes    Landscape[]
}

model Location {
  id   String @id @default(cuid())
  lat  Float
  lng  Float
  city City?
}

model Landscape {
  id          String  @id @default(cuid())
  name        String
  image       String
  description String
  cityId      String
  lat         String?
  lng         String?
  city        City    @relation(fields: [cityId], references: [id])
}

model Tour {
  id               String             @id @default(uuid())
  tourName         String
  tourLocation     String
  tourImage        String
  tourDescription  String
  tags             String?
  price            Json
  startDate        DateTime
  services         String[]
  facilities       String[]
  cancelTill       Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lat              String?
  lng              String?
  features         String[]
  endDate          DateTime?          @db.Timestamp(6)
  schedule         Json[]             @db.Json
  TourRegistration TourRegistration[]
}

model TourRegistration {
  id               String   @id @default(cuid())
  fullName         String
  phoneNumber      String
  countOfPeople    Int
  email            String?
  extraDescription String?
  tourId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tour             Tour     @relation(fields: [tourId], references: [id])

  @@unique([phoneNumber, tourId], name: "unique_registration_per_tour")
}
